library(data.table)
coalSources <- SCC[grep("^Coal ", SCC$Short.Name, ignore.case=F),"SCC"]
aggData <- ddply(NEI[NEI$SCC %in% coalSources,], c("year"), function(df)sum(df$Emissions, na.rm=TRUE))
View(aggData)
source('~/run_analysis.R')
install.packages("data.table")
library(data.table)
activity_labels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")[,2]
features<-read.table("./data/UCI HAR Dataset/features.txt")[,2]
X_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
head(X_test)
names(X_test)=features
head(X_test)
ext_features<-grepl("mean|std", features)
X_test<-X_test[,ext_features]
View(X_test)
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
View(y_test)
y_test[,2] = activity_labels[y_test[,1]]
View(y_test)
subject_test <- read.table("./data/UCI HAR Dataset/test/subject_test.txt")
summary(subject_test)
View(y_test)
names(y_test) = c("Activity_ID", "Activity_Label")
View(y_test)
names(subject_test) = "subject"
View(subject_test)
summary(subject_test)
str(subject_test)
test_data <- cbind(subject_test, y_test, X_test)
View(test_data)
X_train<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
names(X_train)=features
X_train<-X_train[,ext_features]
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
y_train[,2] = activity_labels[y_train[,1]]
subject_train <- read.table("./data/UCI HAR Dataset/train/subject_train.txt")
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
train_data<-cbind(subject_train, y_train, X_train)
data = rbind(test_data, train_data)
head(data)
id_labels<-c("subject", "Activity_ID, Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
?melt
?dcast
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
library(reshape2)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
id_labels<-c("subject", "Activity_ID, Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
View(y_train)
View(y_train)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
View(data)
id_labels<-c("subject", "Activity_ID, Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
?melt
id_labels<-c("subject", "Activity_ID, Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id.vars = id_labels, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
id_labels<-c("subject", "Activity_ID, Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
View(melt_data)
View(data)
id_labels<-c("subject", "Activity_ID", "Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id=id_labels,measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./data/tidy_data.txt")
install.packages("data.table")
library(data.table)
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv "
fileUrl2 ="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv "
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
download.file(fileUrl1,destfile="./data/reviews.csv")
head(reviews.csv)
download.file(fileUrl1, destfile="GDP.csv")
head("GDP.csv")
GDP<-fread("GDP.csv")
GDP<-fread("fileUrl1")
GDP<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
stats<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ")
str(GDP)
str(stats)
head(GDP)[,2]
head(GDP)
head(stats)
GDP<-read.csv(fileUrl1)
head(GDP)
stats<-read.csv(fileUrl2)
head(stats)
names(GDP)
names(stats)
mergedData = merge(GDP,stats,by.x="X",by.y="CountryCode",all=TRUE)
head(mergedData)
sum(mergedData[,X], is.na=FALSE)
sum(mergedData[,mergedData$X], is.na=FALSE)
sum(mergedData[mergedData$X], is.na=FALSE)
sum(mergedData[,"X"],is.na=FALSE)
dtGDP<-data.table(read.csv(fileUrl1, skip=4))
head(dtGDP)
dtstats<-data.table(read.csv(fileUrl2))
head(dtstats)
dtGDP<-dtGDP[X,!=""]
dtGDP<-dtGDP[X,!==""]
dtGDP<-dtGDP[X !=""]
View(dtGDP)
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
View(dtGDP)
dtstats<-data.table(read.csv(fileUrl2))
View(dtstats)
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
dt <- merge(dtGDP, dtstats, all = TRUE, by = c("CountryCode"))
View(dt)
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
data<-dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)]
View(data)
str(dt)
dt<-transform(dt, rankingGDP = as.numeric(rankingGDP))
str(dt)
dt<-transform(dt, dt$rankingGDP = as.numeric(dt$rankingGDP))
?transform
dt[, 4] <- sapply(dt[, 4], as.numeric)
dt[, dt$rankingGDP] <- sapply(dt[, dt$rankingGDP], as.numeric)
?as.numeric
dt[, dt$rankingGDP] <-lapply(dt[, dt$rankingGDP],
function(x) as.numeric(levels(x))[x])
class(dt$rankingGDP)
data<-dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)]
View(data)
data<-dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
View(data)
gdprankings <- read.csv(fileUrl1, skip=4, stringsAsFactors = FALSE)
gdprankings[,3] <- gdprankings[,6] <- gdprankings[,7] <- gdprankings[,8] <- gdprankings[,9] <- gdprankings[,10] <- NULL
View(gdprankings)
colnames(gdprankings) <- c("abbreviation", "ranking", "economy", "gdp")
gdprankings <- gdprankings[gdprankings$abbreviation != "", ] # Remove entries w/ no abbreviation
View(gdprankings)
gdprankings <- gdprankings[1:190,] ## Remove regions - just keep countries
gdprankings[,2] <- as.numeric(gdprankings[,2])
dprankings[,4] <- gsub(",", "", gdprankings[,4]) # Remove "," to allow coercion
gdprankings[,4] <- gsub(",", "", gdprankings[,4]) # Remove "," to allow coercion
View(gdprankings)
gdprankings[,4] <- as.integer(gdprankings[,4])
gdprankings <- gdprankings[order(gdp[,2]), ] ## Order by "gdp" descending
gdprankings <- gdprankings[order(gdprankings[,2]), ] ## Order by "gdp" descending
View(gdprankings)
gdprankings[1:13,]
edstats <- read.csv('getdata-data-EDSTATS_Country.csv', stringsAsFactors = FALSE)
edstats <- read.csv(fileUrl2, stringsAsFactors = FALSE)
mergeddata <- merge(gdprankings, edstats, by.x = "abbreviation", by.y = "CountryCode", all = FALSE)
res1 <- mean(mergeddata[mergeddata$Income.Group=="High income: OECD",]$ranking)
res2 <- mean(mergeddata[mergeddata$Income.Group=="High income: nonOECD",]$ranking)
ans <- c(res1, res2)
ans
quantiles <- quantile(x = mergeddata$gdp, probs=c(0.2,0.4,0.6,0.8,1))
topQuantileRange <- quantiles[4]
data <- mergeddata[mergeddata$Income.Group=="Lower middle income" & mergeddata$gdp > topQuantileRange,]
library(data.table)
activity_labels<-fread("./data/UCI HAR Dataset/activity_labels.txt")[,2]
features<-fread("./data/UCI HAR Dataset/features.txt")[,2]
features
features<-read.table("./data/UCI HAR Dataset/features.txt")[,2]
activity_labels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")[,2]
subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test")
subject_test<-read.table("./data/UCI HAR Dataset/test/subject_test.txt")
X-test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
X_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
names(X-test)<-features
names(X_test)<-features
head(X_test)
extract_features<-grpl("mean"|"std", features)
library(plyr)
extract_features<-grpl("mean"|"std", features)
extract_features<-grepl("mean"|"std", features)
extract_features<-grepl("mean|std", features)
X_test<-X_test[, extract_features]
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
head(y_test)
names(y_test)<-activity_labels(y_test)
names(y_test)<-activity_labels
names(y_test)<-activity_labels(y_test)[,1]
y_test[,2]<-activity_labels[y_test[,1]]
head(y_test)
names(y_test)<-c("Activity_ID", "Activity_label")
y_test[,2]<-activity_labels[y_test[,1]]
names(y_test)<-c("Activity_ID", "Activity_label")
head(y_test)
names(subject_test)<-"subjects"
head(subject_test)
names(subject_test)<-"subject"
subject_train<-read.table("./data/UCI HAR Dataset/train/subject_train.txt")
X_train<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
names(X_trains)<-features
names(X_train)<-features
X_train<-X-train[,extract_features]
X_train<-X_train[,extract_features]
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
y_train[,2]<-activity_labels[y_train[,1]]
names(y_train)<-c("Activity_ID", "Activity_label")
names(subject_train)<-"subject"
test_data<-cbind(subject_test, y_test, X_test)
train_data<-cbind(subject_train, y_train, X_train)
data<-rbind(test_data, train_data)
head(data)
str(data)
melt
?melt
id_column<-c("subject", "Activity_ID", "Activity_label")
id_column<-c("subject", "Activity_ID", "Activity_label")
data2<-melt(data, id_column)
data2<-melt(data, id=id_column)
library(reshape2)
data2<-melt(data, id=id_column)
View(data2)
id_labels<-c("subject", "Activity_ID", "Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id=id_labels,measure.vars = data_labels)
?setdiff
id_labels<-c("subject", "Activity_ID", "Activity_label")
melt_data = melt(data, id=id_labels,measure.vars = data_labels)
library(data.table)
activity_labels<-read.table("./data/UCI HAR Dataset/activity_labels.txt")[,2]
features<-read.table("./data/UCI HAR Dataset/features.txt")[,2]
X_test<-read.table("./data/UCI HAR Dataset/test/X_test.txt")
names(X_test)=features
ext_features<-grepl("mean|std", features)
X_test<-X_test[,ext_features]
y_test<-read.table("./data/UCI HAR Dataset/test/y_test.txt")
y_test[,2] = activity_labels[y_test[,1]]
subject_test <- read.table("./data/UCI HAR Dataset/test/subject_test.txt")
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
test_data <- cbind(subject_test, y_test, X_test)
X_train<-read.table("./data/UCI HAR Dataset/train/X_train.txt")
names(X_train)=features
X_train<-X_train[,ext_features]
y_train<-read.table("./data/UCI HAR Dataset/train/y_train.txt")
y_train[,2] = activity_labels[y_train[,1]]
subject_train <- read.table("./data/UCI HAR Dataset/train/subject_train.txt")
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
train_data<-cbind(subject_train, y_train, X_train)
data = rbind(test_data, train_data)
id_labels<-c("subject", "Activity_ID", "Activity_Label")
data_labels<-setdiff(colnames(data), id_labels)
melt_data = melt(data, id=id_labels,measure.vars = data_labels)
tidy_data = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./data/tidy_data.txt")
?dcast
source('~/cleandata.R')
d_column<-c("subject", "Activity_ID", "Activity_label")
data2<-melt(data, id=id_column)
clean_data = dcast(data2, subject + Activity_label ~ variable, mean)
write.table(clean_data, file = "./data/clean_data.txt")
dev.off()
source('~/.active-rstudio-document')
setwd("~/")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?ggplot
ggplot(emissions.by.year, aes(x=factor(year), y=Emissions)) +geom_bar(stat="identity") +
xlab("year") + ylab(expression("total PM"[2.5]*" emissions")) +ggtitle("Emissions from coal combustion-related sources")
bmore.emissions <- NEI[(NEI$fips=="24510") & (NEI$type=="ON-ROAD"),]
bmore.emissions.aggr <- aggregate(Emissions ~ year, data=bmore.emissions, FUN=sum)
library(ggplot2)
ggplot(bmore.emissions.aggr, aes(x=factor(year), y=Emissions)) +geom_bar(stat="identity") +
xlab("year") +ylab(expression("total PM"[2.5]*" emissions")) +ggtitle("Emissions from motor vehicle sources in Baltimore City")
png("plot5.png")
dev.off()
?write
?write.file
normalize <- function(x) {(x-min(x)) / (max(x)-min(x))}
la.emissions <- NEI[(NEI$fips=="06037") & (NEI$type=="ON-ROAD"),]
la.emissions.aggr <- aggregate(Emissions ~ year, data=la.emissions, FUN=sum)
bmore.emissions.aggr$County <- "Baltimore City, MD"
la.emissions.aggr$County <- "Los Angeles County, CA"
both.emissions <- rbind(bmore.emissions.aggr, la.emissions.aggr)
ggplot(both.emissions, aes(x=factor(year), y=Emissions, fill=County)) +geom_bar(stat="identity") +
facet_grid(County ~ ., scales="free") +ylab("total emissions (tons)") +xlab("year") +
ggtitle(expression("Motor vehicle emission variation\nin Baltimore and Los Angeles"))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
smapleTimes
sampleTimes
install(plyr)
librayr(plyr)
libray(plyr)
library(plyr)
?grpl
?grepl
any<-grepl("2012", sampleTimes)
any
sum(any, TRUE)
dia<-grepl("Mon", any)
any1<-any[TRUE]
any1<-sampleTimes[,any]
any1<-sampleTimes[any]
any1<-sampleTimes[any,]
str<-c("2012"."Mon")
str<-c("2012","Mon")
any<-grepl(str, sampleTimes)
any<-grepl(sampleTimes, str)
dia<-grep(str, sampleTimes, ignore.case = TRUE)
dia<-grep("2012", sampleTimes, ignore.case = TRUE)
str(dia)
dia<-grep("Mon", sampleTimes, ignore.case = TRUE)
library(lubridate)
sampleTimes <- ymd(sampleTimes)
length(subset(sampleTimes, year(sampleTimes) == 2012)
length(subset(sampleTimes, year(sampleTimes) == 2012))
length(subset(sampleTimes, year(sampleTimes) == 2012)& wday(sampleTimes, label=T) == "Mon"))
length(subset(sampleTimes, year(sampleTimes) == 2012& wday(sampleTimes, label=T) == "Mon"))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x ^ 2 * p) - sum(x * p) ^ 2
sum(X^2*Prob)-sum(X*Prob)^2
mean(x)
hist(x,p)
library(swirl)
?rm
rm(list = ls())
ls()
swirl()
install.packages("swril")
library(swril)
swirl()
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
52
4/52
0
12/52
2/51
0.64
0.64
mypdf
integrate(mypdf,lower=0,upper=1,6)
integrate(mypdf,lower=0,upper=1.6)
0.5
info()
1.41
sqr(2)
1.4
equiv_val(sqrt(2))
sqrt(2)
0.997*0.001
0.003*0.985
0.003*0.009
0.003*0.999
(1-0.985)*(1-0.001)
0.000997/(0.014985+0.000997)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)*0.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
source('~/RepData_PeerAssessment1/open_data.R')
View(trueactivity)
averstepsdayinterval
source('~/RepData_PeerAssessment1/open_data.R')
source('E:/varis.R')
?is.installed
?installed
?install.packages
source('E:/varis.R')
source('E:/varis.R')
View(newactivity)
source('E:/varis.R')
install.packages("Hmisc")
source('E:/varis.R')
source('E:/varis.R')
source('E:/varis.R')
mean
mean(bydaynew$imputed_steps, na.rm=TRUE)
median(bydaynew$imputed_steps, na.rm=TRUE)
str(bydaynew)
?weekdays()
?as.date
newactivity$date<-as.Date(newactivity$date)
str(bydaynew)
bydaynew$date<-as.Date(bydaynew$date)
str(bydaynew)
weekdays<-isWeekday(bydaynew$date)
?isWeekday
?is.Weekday
?weekday
?Weekdays
weekdays<-weekdays(bydaynew$date)
activityweek<-cbind(bydaynew,weekdays)
View(activityweek)
week<-isWeekend(activityweek$weekdays)
week<-is.Weekend(activityweek$weekdays)
?isWeekend
?isWeekend
eekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes"))
return("weekday") else if (day %in% c("Sábado", "Domingo"))
return("weekend") else stop("invalid date")
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes"))
return("weekday") else if (day %in% c("Sábado", "Domingo"))
return("weekend") else stop("invalid date")
}
View(data)
bydaynew$date<-as.Date(bydaynew$date)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes"))
return("weekday") else if (day %in% c("Sábado", "Domingo"))
return("weekend") else stop("invalid date")
}
bydaynew$day <- sapply(bydaynew$date, FUN = weekday.or.weekend)
bydaynew$date<-as.Date(bydaynew$date)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes"))
return("weekday") else if (day %in% c("Sábado", "Domingo"))
return("weekend") else stop("invalid date")
}
bydaynew$day <- sapply(bydaynew$date, FUN = weekday.or.weekend)
bydaynew$date<-as.Date(bydaynew$date)
weekdayweekend <- function(date) {
day <- weekdays(date)
if (day %in% c("lunes", "martes", "mi�rcoles", "jueves" , "viernes"))
return("weekday") else if (day %in% c("sábado", "domingo"))
return("weekend") else stop("invalid date")
}
bydaynew$day <- sapply(bydaynew$date, FUN = weekdayweekend)
bydaynew$date<-as.Date(bydaynew$date)
weekdayweekend <- function(date) {
day <- weekdays(date)
if (day %in% c("lunes", "martes", "miércoles", "jueves" , "viernes"))
return("weekday") else if (day %in% c("sábado", "domingo"))
return("weekend") else stop("invalid date")
}
bydaynew$day <- sapply(bydaynew$date, FUN = weekdayweekend)
View(bydaynew)
View(byday)
View(bydaynew)
#convert date to a date class
newactivity$date<-as.Date(newactivity$date)
weekdayweekend <- function(date) {
day <- weekdays(date)
if (day %in% c("lunes", "martes", "miércoles", "jueves" , "viernes"))
return("weekday") else if (day %in% c("sábado", "domingo"))
return("weekend") else stop("invalid date")
}
newactivity$day <- sapply(newactivity$date, FUN = weekdayweekend)
# average number of steps taken, averaged across weekdays or weekends
aversteps <- aggregate(imputed_steps~interval+day, newactivity, mean)
View(aversteps)
ggplot(aversteps, aes(interval, imputed_steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
install.packages("ggplot2")
ggplot(aversteps, aes(interval, imputed_steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
library(ggplot)
library("ggplot")
library(ggplot2)
ggplot(aversteps, aes(interval, imputed_steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
weekdayweekend <- function(date) {
day <- weekdays(date)
if (day %in% c("lunes", "martes", "miércoles", "jueves" , "viernes"))
return("weekday")
else if (day %in% c("sábado", "domingo"))
return("weekend") else stop("invalid date")
weekdayweekend <- function(date) {
day <- weekdays(date)
if (day %in% c("lunes", "martes", "miércoles", "jueves" , "viernes"))
return("weekday")
else if (day %in% c("sábado", "domingo"))
return("weekend") else stop("invalid date")
}
newactivity$day <- sapply(newactivity$date, FUN = weekdayweekend)
